package ReviseAlpha;
public class seveneight {
    class Node
    {
        int data;
        Node next;
        
        // constructor
        public Node(int data)
        {
            this.data = data ;
            this.next = null;
        }
    }

    public static Node head;
    public static Node tail;
    public static int size;

    public void addFirst(int data) //1
    {
        Node newNode = new Node(data) ;
        size++ ;

        if(head == null)
        {
            head = tail = newNode ;
        }

        newNode.next = head;
        head = newNode;
    }

    public void addLast(int data)   //2
    {
        Node newNode = new Node(data) ;
        size++ ;

        if(head == null)
        {
            head = tail = newNode ;
            return;
        }

        tail.next = newNode ;
        tail = newNode ;
    }

    public void addMiddle(int idx , int data)   //3
    {
        Node newNode = new Node(data) ;
        size++ ;
        if(idx == 0)
        {
            addFirst(data);
            return ;
        }

        int i=0 ;
        Node temp = head;

        while(i < idx-1) // previous node  --->   4 -> 5 -> 6
        {
            temp = temp.next ;
            i++;
        }

        newNode.next = temp.next ;
        temp.next = newNode ;
    }

    public void print()         //4
    {
        if(head == null)
        {
            System.out.println("LL is EMptu !!");
            return ;
        }

        Node temp = head;
        while(temp != null)
        {
            System.out.print(temp.data + " -> ");
            temp = temp.next ;
        }

        System.out.println("It's Nulla");
    }

    public int removeFirst()     //5
    {
        if(size == 0)
        {
            System.out.println("Linked List is Empty !");
            return Integer.MIN_VALUE ;
        }

        if(size == 1)
        {
            head = tail = null ;
            int val = head.data;
            size-- ;

            return val ;
        }

        int val = head.data ; 
        head = head.next ;
        size-- ;
        return val ;
    }

    public int removeLast()         //6
    {
        if(size == 0)
        {
            System.out.println("Linked LIst is Empty !!");
            return Integer.MIN_VALUE ;
        }

        if(size == 1)
        {
            head = tail = null ;
            int val = head.data ;
            size = 0 ;
            return val ;
        }

        Node prev = head;
        for(int i=0 ; i<size-2 ; i++)
        {
            prev = prev.next ;
        }

        int val = prev.next.data ;
        tail = prev ;
        size-- ;
        return val ;
    }

    public int iteration_search(int key)
    {
        Node temp = head ;
        int i=0 ;
        while(temp != null)
        {
            if(temp.data == key)
            {
                return i ;
            }
            temp = temp.next ;
            i++ ;
        }

        return -1 ;
    }

    

    public static void main(String[] args) {
        seveneight ll = new seveneight() ;
        ll.addFirst(2);
        ll.addFirst(7);

        ll.addLast(22);
        ll.addLast(90);
        
        ll.addMiddle(2, 78);
        ll.addMiddle(4, -4);
        ll.print(); 

        ll.removeFirst() ;
        System.out.println(ll.removeLast());
        
        ll.print();
       System.out.println(ll.iteration_search(22));
  }
}
